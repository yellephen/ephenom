In the template make a node for compilation. Can be word or assembly etc
It'll compile the exploit into what it needs to be

Maybe make use of evilclippy for additional evasive methods for word
evilclippy doesn't do the macro injection itself




-------------
Below is Done
-------------

#runs msfvenom with commands and takes the shell code
#processors for shell code? eg encoding

#will be called by a template
#a template will have an accompanying txt file with template markers for shell code and anything else like process name or bytes it was xord with

#shellgen
###genshellcode(payload,lhost,lport,format)
runs msfvenom and extracts the shell code form the output with text processing or outputs to a temp file, loads the file into memory and deletes the file.
returns shellcode

#templater
load(template name)
loads the template file and template content for that template.
if there's no custom attributes, runs shellgen (with lhost and lport and payload from main but uses a format specified by the template file), copies the shellcode into the template file and prints to screen
if there are custom parameters in the template file, it will prompt for them with a default value and pressing enter uses the default - make the format for the custom thing very obvious.


##template file
json file
{
    "category":"powershell" #could be word or assembly or exe or powershell for printing available
    "description" : "does the thing" # also for listing from main maybe a listverbose will print descriptions also
    "contentFile" : "psxorprocessinjectionbyname.txt"
    "format" : "ps1",
    
    "customAttributes" : [
        "xorbyte" : [
            "defaultValue" : "0xFE",       
        ],
        "processName" : [
            "defaultValue" : "explorer.exe"   
        ]
    ]
}

##template content file
text file
The boiler plate exploit with template markers for inputs

#main
parameters - payload, lhost, lport, template
or list templates
calls templater with the template name
